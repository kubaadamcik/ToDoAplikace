@page "/todo"
@using System.Text.Json
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using Mono.TextTemplating
@using ToDoAplikace.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<LoadingSpinner IsLoading="isLoading"/>

<h3>Todo</h3>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Název</th>
                        <th scope="col">Popis</th>  
                        <th scope="col">Datum dokončení</th>
                    </tr>
                </thead>
                
                <tbody>
                @if (tasks is not null)
                {
                    @foreach (ToDoTask task in tasks)
                    {
                        <tr>
                            <td>@task.Name</td>
                            <td>@task.Description</td>
                            <td>@task.Deadline</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    private List<ToDoTask>? tasks { get; set; }

    private string userId { get; set; }

    private bool _isLoading;

    private bool isLoading { get => _isLoading; set { _isLoading = value; StateHasChanged(); } }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var user = await UserManager.GetUserAsync(SignInManager.Context.User);

        if (user is not null && firstRender)
        {
            userId = user.Id;

            isLoading = true;
            await FetchTasks();
            isLoading = false;
        }
    }

    private async Task FetchTasks()
    {
        var request = await JSRuntime.InvokeAsync<List<ToDoTask>>("tasks.getTasks", userId);

        tasks = request;

    }


    private async Task CreateTask()
    {
        ToDoTask task = new ToDoTask() { Name = "Task", CreatedAt = DateTime.Now, Deadline = DateTime.Now, Description = "AHOj", UserId = userId };

        var taskJson = System.Text.Json.JsonSerializer.Serialize(task);

        isLoading = true;
        var request = await JSRuntime.InvokeAsync<bool>("tasks.createTask", task);

        isLoading = false;
    }
}
